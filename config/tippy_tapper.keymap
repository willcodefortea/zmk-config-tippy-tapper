/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <250>;
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <32 31>;
        };
    };

    behaviors {
        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 53 54 55 56 57>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  | BSPC |
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //        | CTRL | ALT | GUI | SPC  | LWR |   | RSE | BSPC  | GUI |  ALT | CTRL |

            bindings = <
&kp ESC    &kp N1                &kp N2            &kp N3            &kp N4              &kp N5       &kp N6       &kp N7               &kp N8             &kp N9             &kp N0                    &kp BSPC
&kp TAB    &kp Q                 &kp W             &kp E             &kp R               &kp T        &kp Y        &kp U                &kp I              &kp O              &kp P                     &kp BSPC
&kp LCTRL  &hrml LEFT_CONTROL A  &hrml LEFT_ALT S  &hrml LEFT_GUI D  &hrml LEFT_SHIFT F  &kp G        &kp H        &hrmr RIGHT_SHIFT J  &hrmr RIGHT_GUI K  &hrmr RIGHT_ALT L  &hrmr RIGHT_CONTROL SEMI  &kp SQT
&kp LSHFT  &kp Z                 &kp X             &kp C             &kp V               &kp B        &kp N        &kp M                &kp COMMA          &kp DOT            &kp FSLH                  &trans
           &kp LEFT_CONTROL      &kp LEFT_ALT      &kp LEFT_GUI      &kp SPACE           &lt 3 TAB    &lt 2 ENTER  &kp BACKSPACE        &kp RIGHT_SHIFT    &trans             &trans
            >;
        };

        WIN {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        Right {
            bindings = <
&trans  &trans             &trans    &trans           &trans                 &trans         &trans     &trans          &trans     &trans     &trans        &trans
&trans  &kp EXCL           &kp AT    &kp HASH         &kp DLLR               &kp PERCENT    &kp CARET  &kp AMPS        &kp ASTRK  &kp GRAVE  &kp TILDE     &trans
&trans  &kp DOUBLE_QUOTES  &kp LBKT  &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &trans         &kp FSLH   &kp MINUS       &kp EQUAL  &kp COLON  &kp SEMI      &trans
&trans  &kp SINGLE_QUOTE   &kp RBKT  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans         &kp BSLH   &kp UNDERSCORE  &kp PLUS   &kp PIPE   &kp QUESTION  &trans
        &trans             &trans    &trans           &trans                 &trans         &trans     &trans          &trans     &trans     &trans
            >;
        };

        Left {
            bindings = <
&trans  &trans            &trans        &trans        &trans          &trans        &trans    &trans         &trans       &trans     &trans  &trans
&trans  &kp N1            &kp N2        &kp N3        &kp N4          &kp N5        &kp N6    &kp N7         &kp N8       &kp N9     &kp N0  &trans
&trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &caps_word    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &trans            &kp K_CUT     &kp K_COPY    &kp K_PASTE     &trans        &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans  &trans
        &trans            &trans        &trans        &trans          &trans        &trans    &trans         &trans       &trans     &trans
            >;
        };

        Tri {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans        &trans       &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &bt BT_CLR      &bt BT_SEL 0  &kp C_NEXT   &kp C_VOLUME_UP    &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 1    &bt BT_SEL 2  &kp C_PAUSE  &kp C_MUTE         &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 3    &bt BT_SEL 4  &kp C_PREV   &kp C_VOLUME_DOWN  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans          &trans        &trans       &trans             &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Tri {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
